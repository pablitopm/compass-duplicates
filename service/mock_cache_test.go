// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"sync"
	"time"
)

// Ensure, that CacheMock does implement Cache.
// If this is not the case, regenerate this file with moq.
var _ Cache = &CacheMock{}

// CacheMock is a mock implementation of Cache.
//
//	func TestSomethingThatUsesCache(t *testing.T) {
//
//		// make and configure a mocked Cache
//		mockedCache := &CacheMock{
//			ClearFunc: func()  {
//				panic("mock out the Clear method")
//			},
//			DeleteFunc: func(key string)  {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(key string) (interface{}, bool) {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(key string, value interface{}, duration time.Duration)  {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedCache in code that requires Cache
//		// and then make assertions.
//
//	}
type CacheMock struct {
	// ClearFunc mocks the Clear method.
	ClearFunc func()

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(key string)

	// GetFunc mocks the Get method.
	GetFunc func(key string) (interface{}, bool)

	// SetFunc mocks the Set method.
	SetFunc func(key string, value interface{}, duration time.Duration)

	// calls tracks calls to the methods.
	calls struct {
		// Clear holds details about calls to the Clear method.
		Clear []struct {
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Key is the key argument value.
			Key string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value interface{}
			// Duration is the duration argument value.
			Duration time.Duration
		}
	}
	lockClear  sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockSet    sync.RWMutex
}

// Clear calls ClearFunc.
func (mock *CacheMock) Clear() {
	if mock.ClearFunc == nil {
		panic("CacheMock.ClearFunc: method is nil but Cache.Clear was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClear.Lock()
	mock.calls.Clear = append(mock.calls.Clear, callInfo)
	mock.lockClear.Unlock()
	mock.ClearFunc()
}

// ClearCalls gets all the calls that were made to Clear.
// Check the length with:
//
//	len(mockedCache.ClearCalls())
func (mock *CacheMock) ClearCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClear.RLock()
	calls = mock.calls.Clear
	mock.lockClear.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CacheMock) Delete(key string) {
	if mock.DeleteFunc == nil {
		panic("CacheMock.DeleteFunc: method is nil but Cache.Delete was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	mock.DeleteFunc(key)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedCache.DeleteCalls())
func (mock *CacheMock) DeleteCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CacheMock) Get(key string) (interface{}, bool) {
	if mock.GetFunc == nil {
		panic("CacheMock.GetFunc: method is nil but Cache.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedCache.GetCalls())
func (mock *CacheMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *CacheMock) Set(key string, value interface{}, duration time.Duration) {
	if mock.SetFunc == nil {
		panic("CacheMock.SetFunc: method is nil but Cache.Set was just called")
	}
	callInfo := struct {
		Key      string
		Value    interface{}
		Duration time.Duration
	}{
		Key:      key,
		Value:    value,
		Duration: duration,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	mock.SetFunc(key, value, duration)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedCache.SetCalls())
func (mock *CacheMock) SetCalls() []struct {
	Key      string
	Value    interface{}
	Duration time.Duration
} {
	var calls []struct {
		Key      string
		Value    interface{}
		Duration time.Duration
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
