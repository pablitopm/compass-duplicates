// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"main/model"
	"sync"
)

// Ensure, that ReaderMock does implement Reader.
// If this is not the case, regenerate this file with moq.
var _ Reader = &ReaderMock{}

// ReaderMock is a mock implementation of Reader.
//
//	func TestSomethingThatUsesReader(t *testing.T) {
//
//		// make and configure a mocked Reader
//		mockedReader := &ReaderMock{
//			ReadFunc: func() ([]model.User, error) {
//				panic("mock out the Read method")
//			},
//		}
//
//		// use mockedReader in code that requires Reader
//		// and then make assertions.
//
//	}
type ReaderMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func() ([]model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
		}
	}
	lockRead sync.RWMutex
}

// Read calls ReadFunc.
func (mock *ReaderMock) Read() ([]model.User, error) {
	if mock.ReadFunc == nil {
		panic("ReaderMock.ReadFunc: method is nil but Reader.Read was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedReader.ReadCalls())
func (mock *ReaderMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}
